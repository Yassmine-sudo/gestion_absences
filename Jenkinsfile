pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "my-app-with-ansible"
    }

    stages {
        stage('Cloner le d√©p√¥t') {
            steps {
                checkout scm
                script {
                    echo "Reset du d√©p√¥t sur origin/master"
                    sh 'git fetch --all'
                    sh 'git reset --hard origin/master'
                }
            }
        }

        stage('V√©rification Docker') {
            steps {
                script {
                    echo "‚úÖ V√©rification Docker et Docker Compose"
                    sh 'docker --version || { echo "Docker non install√©"; exit 1; }'
                    sh 'docker-compose --version || { echo "Docker Compose non install√©"; exit 1; }'
                    sh 'docker ps'
                }
            }
        }

        stage('Construire l\'image Docker avec Ansible') {
            steps {
                script {
                    echo "üî® Build de l'image ${DOCKER_IMAGE}"
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Construire les conteneurs') {
            steps {
                script {
                    echo "‚öôÔ∏è Construction des conteneurs via docker-compose"
                    sh 'docker-compose down --remove-orphans || true'
                    sh 'docker-compose build'
                }
            }
        }

        stage('Lancer l\'application') {
            steps {
                script {
                    def containerExists = sh(script: "docker ps -a -q -f name=jenkins-test", returnStdout: true).trim()
                    if (containerExists) {
                        echo "üîÅ Le conteneur 'jenkins-test' existe d√©j√†. Red√©marrage..."
                        sh 'docker start jenkins-test || true'
                    } else {
                        echo "üöÄ Lancement de l'application avec docker-compose"
                        sh 'docker-compose up -d'
                    }
                }
            }
        }

        stage('V√©rification de la pr√©sence du playbook.yml') {
            steps {
                script {
                    def ws = sh(script: 'pwd', returnStdout: true).trim()
                    echo "üîé V√©rification du playbook dans ${ws}/deploiement"

                    sh """
                        docker run --rm \\
                            -v "${ws}/deploiement:/ansible" \\
                            -w /ansible \\
                            ${DOCKER_IMAGE} \\
                            /bin/bash -c 'ls -al && test -f playbook.yml && echo "‚úÖ Playbook trouv√©" || { echo "‚ùå Playbook introuvable"; exit 1; }'
                    """
                }
            }
        }

        stage('D√©ploiement avec Ansible') {
            steps {
                script {
                    def ws = sh(script: 'pwd', returnStdout: true).trim()
                    echo "üì¶ D√©ploiement du playbook depuis ${ws}/deploiement"
                    sh """
                        docker run --rm \\
                            -v "${ws}/deploiement:/ansible" \\
                            -w /ansible \\
                            ${DOCKER_IMAGE} \\
                            ansible-playbook playbook.yml
                    """
                }
            }
        }

        stage('Ex√©cuter les tests (si applicable)') {
            steps {
                echo "üß™ Aucun test d√©fini pour le moment."
            }
        }

        stage('Nettoyage') {
            steps {
                echo "üßπ Nettoyage √©ventuel des ressources..."
            }
        }
    }

    post {
        failure {
            echo "‚ùå Le pipeline a √©chou√©."
        }
        success {
            echo "‚úÖ Le pipeline a r√©ussi."
        }
    }
}
